JAvascript -- uses esic as compiler 

java script is cas sensitive language 

Syntax for math 
+,-*./

order of operation 
BODMAS 

* / are done first -- it has same precedence and when both are there it work left to right 
+ - are done after -- it has same precedence and when both are there it work left to right 
() brackets have highest priority

2,3,4 integer numbers 
0.2.0.4 -- floating pointnumbers 
Math.round();


Strings
strings comes in sing quote '' -- 'hello'

concatination
'dsds'+'sdsd'+'dsd' =

type cohesion or type conversion 
'ksldk'+'2' = 'ksldk2'

check type = type of 'hello = strong' or type of 22 = numbers.
javaScript we cas use sing quptes and double quotes both .

"I'm learning JavaScript" -- this will work in the case where quote is present in the string

Escape Character :- 
letter , number , symbol are character but esape character is \'  -- it create next character as next character as text
\" create double quote
\n new line character

String 3rd way 
template string -- `your string` used for interpolation 

for eg:- `ITEMS(${1+1})` --`ITEMS(${1+1}):$${(2095+799)/100}` this is interpolation which is clear way

multi line string 
`some 
text`
'some \ntext'
'..' vs "..."
always use single quote as default


Variables :- 

cant use special words for variable :- foreg :- let

cant start with a number 

cant use specail characters except :- $ _
eg :- let $name =3 and let _name =3;

variable RE-assignment Shortcut 
+=2 variable = variable +2;
-=2 variable = variable -2;
/=2 variable = variable /2;
*=2 variable = variable *2;\
++  variable = variable +1
--  variable = variable -1

Naming Convention 
camelCase  nikhilVyas default
PascalCase NikhilVyas
kebab-case doesnt work in js but ued in html and css
snake_case nikhil_vyas

3 ways to create variable 
let varaible1; use when you know you need to change the value
const varaible2; --value stays constant can not be rechanged like final (use const by default)
var variable3=3; can be changed later it is the original way there is some issue in using with scopes that is why we can not use in new js code.

typeof -- used to know the type of value inside the variable.


Booleans
two values = true/false

purpose of Booleans
represtn something true or false;
syntax
let flag = true;


Comparision Operator
> greater than 
< less than 

>= greater than equal 
<= less than equal

=== equal to  (special case) // 5 == '5.0'  == converst both value into same type that is why we used === not conversion ==

!== not equal to //in JS we use !== and not != to avoid conversation behaviour

comparision operator order
1.(..)
2.*/
3.+-
4.comparision operator   have lower priority then lath operator 
for eg :- (3>5 -5) 5-5 will caluate first and then 3>value


if-Statements
if and else 
else is optional
else if


logical operator
logical AND operator && -- short circuit evaluation because it check first part if it is false it stops and give false result
logical or operator ||
logical not operator !

Scope
local Scope {inside the local scope }
global Scope


truthy and Falsy value

Falsy values
false 0 '' NaN undefined null any value not on this list is truthy value

if(5)
{
  console.log('truthy') //it returns truthy but 0 will return falsy
}


NaN is not an number 



Sortcuts for if-Statement 
- Ternary Operator?:
-Guard Operator && -- false &&console.log('hello');
- Default OPerator |  --check if atleast 1 side is truthy 


Function
function let us resue the code

syntax rule
function name$_(){
  function body
}
best practise use camelCase

function creates scope ,
{
  we can not access variable here to outside it is scoped to local
}


Parameters RUles
1) cant use soecail words.
2) cant start with a number 
3) cat use special character except $_name
4) best use camelCase

calculate(500);

function(parameter/argument/value){
  parameter/argument/value can be used in this scope only;
}

passing an value or we can say argument to the calculate function.

Objects:- 
what is an object :- an object can groups multiple values together.
{property : value ,....}
objects are another type of value;
objects make our code more organized.
it let us use multiple value together .

we can access the property and value using . and with breaket annotation[]
we use [] where it is not possible to get the values using object.property value like eg :- object.delivery-time here we need to use 
object['delivery-time'] to get the value
/object inside object is allowed
//function inside object is method
//function is another type of value we can save them in objects
    console.log(product2.name); //default
    console.log(product2['delivery-time']); //sepcial case

    Json build in object
    - helps us work with JSON -- java script object notation
    a syntax has less feature 
    in JSOn all need to use double quotes ""
    similar to JS 
    Json can be understood all the programming languages 
    we send data using json between computer 

    build-in Json Object 
    convert:
    JS object --> Json


    const jsonString = JSON.stringify(product2); //converting to json from JS object
    console.log(JSON.parse(jsonString)); parsing again into JS obejct

    local storage.setIte(name , string)) ; local storage only supports string

    null 

    null is a falsy value similar to undefined 

    null vs undefined 
    use null if intentially need to be emopty  ;

    function func(parameter ='default')
    {
      console.log(paramter);
    }

    func(); ==> 'default';
    func(undefined) ==> 'default' ;-- if undefined did not find any value it will take the dfault value;

    func(null) ==> null -- it will not use the default value ;intentionally emoty 


  autoboxing :- JS wrap property to object and then work on this . works with numbers and booleans and not work with null and undefined
  object are references -- they get saved in memory location and it get stored  there , direct comparision of two differenct object is false as they pooints to different locations.
  although we can compare the properties inside the two different objects



  destructuring the object
    //destructuring the object 
    //we can get the property out of the object and assign it like this .

    // const message =object1.message;


    //or we there is another way to destructure directly is 
    //this is called as shorthand property 
    //const { message } = object1;

    //and we can do it with multiple properties
    const { message, cost } = object4;
    console.log(message);
    console.log(cost);


    //shorthand property
    const object5 = {
      // message: message
      message, //if property and variable name are same we can use it only for once .
    }
    console.log(object5);
    //we can also have the methods in object 
    const object6 = {
      message,
      // method: function func1() {
      //   console.log(
      //     'method'
      //   )

      //this below code do the same thing as above but it is an shorter way of doing it it is called as shorthand method // function name is actually not needed.
      method() {
        console.log('method')
      }

    };


    DOM (document object model)
  document objects represents /models the webpage thas is why it is dom.

dom is just built in document object

document object have methods and properties

dom combines html and JS together.

inside JS dom if you use html you will get the 


method is a function which is saved inside the object .

document.biody let us put html inside body , when an html element is isndie the js it becomes the object .

clicks,keydown=> events
onclick,onkeydown --> event listeners
other --> onclick , onkeydown,onscroll,onmouseenter,onmouseleave

when in case we have to add the number like 
'25'+5 == it will do the concatinationi n case of +
but in case of *-/ JS will automatically converst it into number and do the maths 
for eg:- ('25'-5 ) = 20 due to type conversion in numbr we also says it TypeCoersion
Always do maths with numbers not with strings 


window object represt the object eg :- window.document --will give us the same webpage
windows.console.log(); is similar to console.log();
windows.alert() is similar to alert()


document object represent the webpage



