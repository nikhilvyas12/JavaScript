JAvascript -- uses esic as compiler 

java script is cas sensitive language 

Syntax for math 
+,-*./

order of operation 
BODMAS 

* / are done first -- it has same precedence and when both are there it work left to right 
+ - are done after -- it has same precedence and when both are there it work left to right 
() brackets have highest priority

2,3,4 integer numbers 
0.2.0.4 -- floating pointnumbers 
Math.round();


Strings
strings comes in sing quote '' -- 'hello'

concatination
'dsds'+'sdsd'+'dsd' =

type cohesion or type conversion 
'ksldk'+'2' = 'ksldk2'

check type = type of 'hello = strong' or type of 22 = numbers.
javaScript we cas use sing quptes and double quotes both .

"I'm learning JavaScript" -- this will work in the case where quote is present in the string

Escape Character :- 
letter , number , symbol are character but esape character is \'  -- it create next character as next character as text
\" create double quote
\n new line character

String 3rd way 
template string -- `your string` used for interpolation 

for eg:- `ITEMS(${1+1})` --`ITEMS(${1+1}):$${(2095+799)/100}` this is interpolation which is clear way

multi line string 
`some 
text`
'some \ntext'
'..' vs "..."
always use single quote as default


Variables :- 

cant use special words for variable :- foreg :- let

cant start with a number 

cant use specail characters except :- $ _
eg :- let $name =3 and let _name =3;

variable RE-assignment Shortcut 
+=2 variable = variable +2;
-=2 variable = variable -2;
/=2 variable = variable /2;
*=2 variable = variable *2;\
++  variable = variable +1
--  variable = variable -1

Naming Convention 
camelCase  nikhilVyas default
PascalCase NikhilVyas
kebab-case doesnt work in js but ued in html and css
snake_case nikhil_vyas

3 ways to create variable 
let varaible1; use when you know you need to change the value
const varaible2; --value stays constant can not be rechanged like final (use const by default)
var variable3=3; can be changed later it is the original way there is some issue in using with scopes that is why we can not use in new js code.

typeof -- used to know the type of value inside the variable.


Booleans
two values = true/false

purpose of Booleans
represtn something true or false;
syntax
let flag = true;


Comparision Operator
> greater than 
< less than 

>= greater than equal 
<= less than equal

=== equal to  (special case) // 5 == '5.0'  == converst both value into same type that is why we used === not conversion ==

!== not equal to //in JS we use !== and not != to avoid conversation behaviour

comparision operator order
1.(..)
2.*/
3.+-
4.comparision operator   have lower priority then lath operator 
for eg :- (3>5 -5) 5-5 will caluate first and then 3>value


if-Statements
if and else 
else is optional
else if


logical operator
logical AND operator && -- short circuit evaluation because it check first part if it is false it stops and give false result
logical or operator ||
logical not operator !

Scope
local Scope {inside the local scope }
global Scope


truthy and Falsy value

Falsy values
false 0 '' NaN undefined null any value not on this list is truthy value

if(5)
{
  console.log('truthy') //it returns truthy but 0 will return falsy
}


NaN is not an number 



Sortcuts for if-Statement 
- Ternary Operator?:
-Guard Operator && -- false &&console.log('hello');
- Default OPerator |  --check if atleast 1 side is truthy 


Function
function let us resue the code

syntax rule
function name$_(){
  function body
}
best practise use camelCase
